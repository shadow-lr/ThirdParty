/*
 * Copyright (c) 2019-2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2019-2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */

#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable


#include "host_device.h"
#include "raycommon.glsl"
#include "sampling.glsl"

// clang-format off
layout(binding = eBvh, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = eScene, set = 0) uniform UBOscene { Scene s; } ubo;
# if USE_FLOAT
layout(binding = eImages, rgba32f, set = 0) uniform image2D image[];
# else
layout(binding = eImages, rgba16f, set = 0) uniform image2D image[];
# endif
// clang-format on

layout(push_constant) uniform Constants
{
  PcRay pcRay;
};


layout(location = 0) rayPayloadEXT PerRayData_pathtrace prd;


//////////////////////////// AO //////////////////////////////////////
#define EPS 0.05
const float PI = 3.141592653589;

void main()
{
  vec3 res_normal = vec3(0);
  vec3 res_albedo = vec3(0);

  vec3 hitValue = vec3(0);
  for(int smpl = 0; smpl < pcRay.samples; ++smpl)
  {
    //uint seed = hash_value((gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x) *samples+smpl)+ frame ;
    uint  seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, pcRay.frame * pcRay.samples + smpl);
    float r1   = rnd(seed);
    float r2   = rnd(seed);

    // Subpixel jitter: send the ray through a different position inside the pixel each time,
    // to provide antialiasing.
    vec2 subpixel_jitter = (pcRay.frame * pcRay.samples + smpl) == 0 ? vec2(0.0f, 0.0f) : vec2(r1 - 0.5f, r2 - 0.5f);

    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5) + subpixel_jitter;
    const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2       d           = inUV * 2.0 - 1.0;

    mat4  viewInverse = inverse(ubo.s.model);
    mat4  projInverse = inverse(ubo.s.projection);
    vec4  origin      = viewInverse * vec4(0, 0, 0, 1);
    vec4  target      = projInverse * vec4(d.x, d.y, 1, 1);
    vec4  direction   = viewInverse * vec4(normalize(target.xyz), 0);
    uint  rayFlags    = gl_RayFlagsOpaqueEXT;
    uint  cullMask    = 0xff;
    float tmin        = 0.001;
    float tmax        = 10000.0;

    prd.result      = vec3(0.f);
    prd.attenuation = vec3(1.f);
    prd.done        = 0;
    prd.seed        = seed;
    prd.depth       = 0;
    prd.normal      = vec3(0);
    prd.albedo      = vec3(0);


    for(;;)
    {
      traceRayEXT(topLevelAS, rayFlags, cullMask, 0 /*sbtRecordOffset*/, 0 /*sbtRecordStride*/, 0 /*missIndex*/,
                  origin.xyz, tmin, direction.xyz, tmax, 0 /*payload*/);

      prd.result += prd.radiance * prd.attenuation;

      // Russian roulette termination
      if(prd.depth >= 1)
      {
        float pcont = max(prd.attenuation.x, max(prd.attenuation.y, prd.attenuation.z));
        if(rnd(seed) >= pcont)
          break;
        prd.attenuation /= pcont;
      }
      else
      {
        res_normal = prd.normal;
        res_albedo = prd.albedo;
      }

      prd.depth++;
      if(prd.done == 1 || prd.depth >= pcRay.depth)
        break;

      origin.xyz    = prd.origin;
      direction.xyz = prd.direction;
    }

    hitValue += prd.result;
  }


  hitValue = hitValue / pcRay.samples;

  // Do accumulation
  uint linearIdx = gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x;
  if(pcRay.frame > 0)
  {
    float a         = 1.0f / float(pcRay.frame);
    vec3  old_color = imageLoad(image[0], ivec2(gl_LaunchIDEXT.xy)).xyz;
    imageStore(image[0], ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color, hitValue, a), 1.f));
  }
  else
  {
    imageStore(image[0], ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 1.f));
#if NB_OUT_IMG > 1
    imageStore(image[1], ivec2(gl_LaunchIDEXT.xy), vec4(res_albedo, 1.f));
    imageStore(image[2], ivec2(gl_LaunchIDEXT.xy), vec4(res_normal, 1.f));
#endif
  }
}
